//32
// Abstract class Shape
abstract class Shape {
    abstract double area(); // abstract method
}

// Circle class extending Shape
class Circle extends Shape {
    double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    // Implementing area() for Circle
    @Override
    double area() {
        return Math.PI * radius * radius;
    }
}

// Rectangle class extending Shape
class Rectangle extends Shape {
    double length, width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    // Implementing area() for Rectangle
    @Override
    double area() {
        return length * width;
    }
}

// Interface Playable
interface Playable {
    void play(); // abstract method
}

// Guitar class implementing Playable
class Guitar implements Playable {
    @Override
    public void play() {
        System.out.println("Playing the guitar... üé∏");
    }
}

// Drum class implementing Playable
class Drum implements Playable {
    @Override
    public void play() {
        System.out.println("Playing the drums... ü•Å");
    }
}

// Main class
public class Main {
    public static void main(String[] args) {
        // Task 1: Abstract class Shape
        Shape circle = new Circle(5.0);
        Shape rectangle = new Rectangle(4.0, 6.0);

        System.out.println("Area of Circle: " + circle.area());
        System.out.println("Area of Rectangle: " + rectangle.area());

        System.out.println("------------------------");

        // Task 2: Interface Playable
        Playable guitar = new Guitar();
        Playable drum = new Drum();

        guitar.play();
        drum.play();
    }
}
